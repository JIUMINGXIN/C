#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <windows.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

//int s(unsigned int a) 第一种方法求二进制中有几个一
//{
//	int count = 0;
//	while (a !=0)
//	{
//		if (a % 2== 1)
//		{
//			count++;
//		}
//		a = a / 2;
//	}
//	return count;
//}
//int s(int a) 方法二
//{
//	int i = 0;
//	int count = 0;
//	for (i = 0; i < 32; i++)
//	{
//		
//		if (((a >> i) & 1) == 1)
//		{
//			count++;
//		}
//	}
//	return count;
//}
//int s(int a) //方法三
//{
//	int count = 0;
//	while (a != 0)
//	{
//		a = a & (a - 1);
//		count++;
//	}
//	return count;
//}
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	int q = s(a);
//	printf("%d\n", q);
//	return 0;
//}

//int s(int a) //求俩个二进制数中有几个不同
//{
//	int b = 0;
//	while (a != 0)
//	{
//		a = a & (a - 1);
//		b++;
//	}
//	return b;
//}
//int s(int n, int m)
//{
//	int count = n ^ m;
//	int p = s(count);
//	return p;
//}
//int main()
//{
//	int n = 0;
//	int m = 0;
//	scanf("%d%d", &n, &m);
//	int q = s(n, m);
//	printf("%d", q);
//	return 0;
//}

//void s(int m) //分别求一个数的奇数位和偶数位
//{
//	int i = 0;//00000000 00000000 00000000 00001010
//	printf("奇数位\n");
//	for (i = 30; i >= 0; i -= 2)
//	{
//		printf("%d",((m >> i) & 1));
//	}
//	printf("\n");
//	printf("偶数位\n");
//	for (i = 31; i >= 1; i -= 2)
//	{
//		printf("%d", ((m >> i) & 1));
//	}
//}
//int main()
//{
//	int m = 0;
//	scanf("%d", &m);
//	s(m);
//	return 0;
//}

//void s(int* a, int q)
//{
//	int i = 0;
//	for (i = 0; i < q ; i++)
//	{
//		printf("%d",*(a+i) );
//		
//	}
//}
//int main()
//{
//	int a[] = { 1,2,3,4,5,6,7,8,9 };
//	int q = sizeof(a) / sizeof(int);
//	s(a, q);
//	return 0;
//}

//int main()
//{
//	int i = 0;
//	int j = 0;
//	for (i = 1; i < 10; i++)
//	{
//		for (j=1;j<=i;j++)
//		{
//			printf("%d*%d=%-2d ", i, j, i * j);
//		}
//		printf("\n");
//	}
//	return 0;
//}

//void s(int a)
//{
//	if (a > 9)
//	{
//		s(a / 10);
//
//	}
//	printf("%d ", a % 10);
//}
//int main()
//{
//	int a = 1234;
//	s(a);
//	return 0;
//}

//int s(int i)
//{
//	if (i > 1)
//	{
//		return (i * (s(i - 1)));
//	}
//	else
//	{
//		return 1;
//	}
//}
//int main()
//{
//	int i = 0;
//	scanf("%d", &i);
//	int q=s(i);
//	printf("%d", q);
//	return 0;
//}

//void s(char* a,int right) //循环的方法求反序
//{
//	int left = 0;
//	while (left < right)
//	{
//		int t = a[left];
//		a[left] = a[right];
//		a[right] = t;
//		left++;
//		right--;
//	}
//	
//}

//int strleng(char* str)//递归求反序
//{
//	int count = 0;
//	while (*str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
//void s(char* a) 
//{
//	int t = a[0];
//	int len = strleng(a);
//	a[0] = a[len - 1];
//	a[len - 1] = '\0';
//	if ((strleng(a+ 1) )>1)
//	s(a + 1);
//	a[len - 1] = t;
//
//}
//int main()
//{
//	char a[] = "abcdef";
//
//	
//	s(a);
//	printf("%s", a);
//	return 0;
//}

//int s(int a)//求一个数上各个位之和
//{
//	static int p = 0;
//	if (a > 9)
//	{
//		s(a / 10);
//	}
//
//	return p = p + a % 10;
//
//}
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	int q=s(a);
//	printf("%d", q);
//	return 0;
//}

//double pow(int n, int k)//求n的k次方
//{
//	if (k > 0)
//	{
//		return n *pow(n,k - 1);
//	}
//	else if (k==0)
//	{
//		return 1;
//	}
//	else
//	{
//		return 1/(double) pow(n, -(k));
//	}
//}
//int main(){
//
//	int n = 0;
//	int k = 0;
//	scanf("%d%d", &n, &k);
//	double q= pow(n, k);
//	printf("%lf", q);
//	return 0;
//}

//int main()//55555+5555+555+55+5
//{
//	int a = 0;
//	int i = 0;
//	int s = 0;
//	int q = 0;
//	int w = 0;
//	scanf("%d", &a);
//	for (i = 0; i < 5; i++)
//	{
//		w = a * pow(10, i);
//		q = q + w;
//			s = s + q;
//		
//		
//		
//
//	}
//	printf("%d", s);
//	return 0;
//}
