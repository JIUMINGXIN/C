//int cmp_int(const void* e1, const void* e2)
//{
//	return *(int*)e1 - *(int*)e2;
//}
void swap(char* p1, char* p2,int width)
{
	int i = 0;
	for (i = 0; i < width; i++)//字节一个个交换
	{
		char tmp = *p1;
			*p1 = *p2;
			*p2 = tmp;
			p1++;
			p2++;
	}
}
void bubble_sort(void* arr, int sz, int width, int (*cmp)(const void* e1,const void* e2))//实现bubble_sort函数的程序员，他是否知道未来排序的数据类型-不知道
{																						 //并且程序员也不知道比较俩个元素的类型所以都用void*来存储
	int i = 0;
	int j = 0;
	for (i = 0; i < sz - 1; i++)
	{
		for (j = 0; j < sz - 1 - i; j++)
		{
			if ((cmp)((char*)arr + j * width, (char*)arr + (1 + j) * width) > 0)//回调函数
			{
				swap((char*)arr + j * width, (char*)arr + (1 + j) * width,width);//把width传过去就可以知道每对的东西要换几次字节
			}
		}
	}
}
//void test4()
//{
//	int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
//	int sz = sizeof(arr) / sizeof(int);
//	//使用bubble_sort的程序员一定知道自己排序的是什么数据
//	//就应该知道如何比较待排序数组中的元素
//	bubble_sort(arr, sz, sizeof(int), cmp_int);
//
//}
struct stu
{
	char name[5];
	int age;
};
int cmp_age(const void* e1, const void* e2)
{
	return ((struct stu*)e1)->age - ((struct stu*)e2)->age;
}
void test5()
{
	struct stu s[3] = { {"张三",20},{"李四",10},{"王五",30}};
	int sz = sizeof(s) / sizeof(s[0]);
	bubble_sort(s, sz, sizeof(s[0]), cmp_age);
}
int main()
{
	//test4();
	test5();
	return 0;
}
