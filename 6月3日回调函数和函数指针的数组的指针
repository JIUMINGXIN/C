//void menu()
//{
//	printf("*****************\n");
//	printf("***1.add 2.sub***\n");
//	printf("***3.mul 4.div***\n");
//	printf("******0.exit*****\n");
//	printf("*****************\n");
//}
//int add(int x, int y)
//{
//	return x + y;
//}
//int sub(int x, int y)
//{
//	return x - y;
//}
//int mul(int x, int y)
//{
//	return x * y;
//}
//int Div(int x, int y)
//{
//	return x / y;
//}
//void cal(int (*p)(int, int))//方法3的函数 回调函数
//{
//	int x = 0;
//	int y = 0;
//	printf("请输入俩操作数:");
//	scanf("%d%d", &x, &y);
//	printf("%d\n", p(x, y));
//}
//int main()//计数器
//{
//	int input = 0;
//	int x = 0;
//	int y = 0;
//	do
//	{
//		menu();
//		printf("请选择>");
//		scanf("%d",& input);
//		//int (*p[5])(int, int) = { 0,add,sub,mul,Div };//方法1 函数指针数组（转移表）
//		//int a = 0;
//		//if (input > 0 && input <= 4)
//		//{
//		//	printf("输入俩操作数:");
//		//	scanf("%d%d", &x, &y);
//		//	a = p[input](x, y);
//		//	printf("%d\n", a);
//		//}
//		//else if (input == 0)
//		//{
//		//	printf("退出\n");
//		//}
//		//else
//		//	printf("输入错误\n");
//
//		/*switch (input)//方法2             
//		{
//		case 1:
//			printf("请输入俩操作数:");
//			scanf("%d%d", &x, &y);
//			printf("%d\n", add(x, y));
//			break;
//		case 2:
//			printf("请输入俩操作数:");
//			scanf("%d%d", &x, &y);
//			printf("%d\n", sub(x, y));
//			break;
//		case 3:
//			printf("请输入俩操作数:");
//			scanf("%d%d", &x, &y);
//			printf("%d\n", mul(x, y));
//			break;
//		case 4:
//			printf("请输入俩操作数:");
//			scanf("%d%d", &x, &y);
//			printf("%d\n", Div(x, y));
//			break;
//		case 0:
//			printf("退出\n");
//			break;
//		default:
//			printf("输入错误\n");
//			break;
//		}*/
//
//		switch (input)//方法3
//		{
//		case 1:
//			cal(add);
//			break;
//		case 2:
//			cal(sub);
//			break;
//		case 3:
//			cal(mul);
//			break;
//		case 4:
//			cal(Div);
//			break;
//		case 0:
//			printf("退出\n");
//			break;
//		default:
//			printf("输入错误\n");
//			break;
//		}
//	} while (input);
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 0 };
//	int(*p)[10] = &arr;//数组指针(取出数组的地址)
//
//	int (*pf)(int, int);//函数指针
//	int (*ppf[4])(int, int);//ppf是一个数组，函数指针的数组
//	//pppf是一个指向函数指针数组的指针
//	int (*(* pppf)[4] )(int, int);//pppf是一个数组指针，指针指向的数组有4个元素
//								  //指向的数组的每个元素的类型是一个函数指针int(*)(int,int)
//	return 0;
//}


void print(const char* str)
{
	printf("hehe:%s", str);
}
void test(void (*p)(const char*))
{
	printf("test\n");
	p("bit");
}
int main()//回调函数
{
	test(print);
	return 0;
}
