//int main()
//{
//	int a[3][4] = { 0 };
//	printf("%d\n", sizeof(a));//48
//	printf("%d\n", sizeof(a[0][0]));//4-第一个元素大小
//	printf("%d\n", sizeof(a[0]));//16-a[0]相当于第一行作为第一个一维数组的数组名(一共有3个一维数组)，计算的是第一行的大小
//	printf("%d\n", sizeof(a[0]+1));//4/8-a[0]是第一行的数组名，但是它不是单独放到sizeof里面或者&a,
//	//所以它是首元素的地址,a[0]其实就是第一行第一个元素的地址，a[0]+1就是第一行第二个元素的地址
//	printf("%d\n", sizeof(*(a[0]+1)));//4-*(a[0]+1)就是第一行第二个元素的大小
//	printf("%d\n", sizeof(a+1));//4/8-a是二维数组的数组名，但是它不是单独放在sizeof里或者&a,所以此时的数组名(a)是首元素地址，
//	//而把二维数组看成一维数组时，二维数组的首元素是它的第一行，a就是第一行(首元素)的地址，a+1就是第二行的地址
//	printf("%d\n", sizeof(*(a+1)));//16-计算的是第二行的大小
//	printf("%d\n", sizeof(&a[0]+1));//4/8-第二行的地址
//	printf("%d\n", sizeof(*(&a[0]+1)));//16-第二行地址的大小
//	printf("%d\n", sizeof(*a));//16-a是第一行的地址，*a就是第一行的大小
//	printf("%d\n", sizeof(a[3]));//16-在sizeof里面只是计算大小并没有实际去访问这个空间
//	return 0;
//}

//int main()
//{
//	int a[5] = { 1,2,3,4,5 };
//	int* ptr = (int*)(&a + 1);
//	printf("%d %d\n", *(a + 1), *(ptr - 1));
//	printf("%d %d\n", *(a + 1), sizeof((&a+1)));
//	return 0;
//}

struct test
{
	int num;
	char* p;
	short s;
	char ch[2];
	short sba[4];
}*p;
//假设p的值为0x100000
//已知，结构体test类型的变量大小是20个字节
int main()
{
	p = (struct test*)0x100000;
	printf("%p\n", p + 0x1);//0x00100014-结构体指针加1是加20个字节
	printf("%p\n",(unsigned long) p + 0x1);//0x00100001-把100000强制转换成10进制然后加1，最后再转换成16进制
	printf("%p\n", (unsigned int *)p + 0x1);//0x00100004-把100000+4整型指针加1跳过4个字节
	return 0;
}
