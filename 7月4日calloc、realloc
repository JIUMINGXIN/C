//int main()
//{
//	int * p=(int*)calloc(10, sizeof(int));//calloc（元素个数，元素大小）把里面的参数初始化成0，malloc没有初始化
//	if (p == NULL)
//	{
//		printf("%s", strerror(errno));
//	}
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(p + i) = i;
//		}
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//	}
//	free(p);
//	p = NULL;
//	return 0;
//}

int main()
{
	int* p = (int*)malloc(20);
	if (p == NULL)
	{
		printf("%s", strerror(errno));
	}
	else
	{
		int i = 0;
		for (i = 0; i < 5; i++)
		{
			*(p + i) = i;
		}
		for (i = 0; i < 5; i++)
		{
			printf("%d ", *(p + i));//0 1 2 3 4
		}
	}
	//原本只有20个字节空间，希望我们有40个字节的空间
	//这里就可以用realloc来调整动态开辟的内存
	//realloc使用注意事项：
	//1.如果p指向的空间之后有足够的内存可以追加，则直接追加,后返回p
	//2.如果p指向的空间之后没有足够的内存可以追加，则realloc函数会重新找一个新的内存区域
	//开辟一块满足需求的空间，并把原来的内存中的数据拷贝回来，释放旧的内存空间
	//最后返回新开辟的内存空间地址
	//3.得用一个新的变量来接受realloc函数的返回值（realloc（p，INT_MAX）太大了会开辟失败返回null，然后改变p）
	int * ptr=(int*)realloc(p, 40);
	if (ptr != NULL)
	{
		p = ptr;
		int i = 0;
		for (i = 5; i < 10; i++)
		{
			*(p + i) = i;
		}
		for (i = 5; i < 10; i++)
		{
			printf("%d ", *(p + i));//5 6 7 8 9
		}
	}
	free(p);
	p = NULL;
	return 0;
}
