//int main()//数组指针
//{
//	char* a[5] = { 0 };
//	char* (*p)[5] = &a;
//
//	int a1[5] = { 0 };
//	int(*p1)[5] = &a1;
//	return 0;
//}

//int main()
//{
//	int a[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int(*p)[10] = &a;
//	int i = 0;
//	//for (i = 0; i < 10; i++)//方法1 一般不这样用
//	//{
//	//	printf("%d\n", (*p)[i]);
//	//}
//	//for (i = 0; i < 10; i++)//方法2 一般不这样用
//	//{
//	//	printf("%d\n",  *( * p + i));
//	//}
//	return 0;
//}

void print1(int a[3][5], int x, int y)//参数是数组的形式
{
	int i = 0;
	int j = 0;
	for (i = 0; i < x; i++)
	{
		for (j = 0; j < y; j++)
		{
			printf("%d ", a[i][j]);
		}
		printf("\n");
	}
}
void print2(int(*a)[5], int x, int y)//参数是指针的形式。把原本的二维数组看成一维数组，首元素地址就是第一个数组
{
	int i = 0;
	int j = 0;
	for (i = 0; i < x; i++)
	{
		for (j = 0; j < y; j++)
		{
			printf("%d ", ( * (a + i))[j]);
			printf("%d ", a[i][j]);
			printf("%d ", *(*(a + i) + j));
			printf("%d ", *(a[i]+j));
		}
		printf("\n");
	}
}
int main()
{
	int a[3][5] = { {1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7} };
	print1(a, 3, 5);
	print2(a, 3, 5);
	return 0;
}
