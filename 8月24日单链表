struct Node
{
	int date;//数据域
	struct Node* next;//指针域
};
struct Node* createList()
{
	struct Node* headNode = (struct Node*)malloc(sizeof(struct Node));
	headNode->next = NULL;
	return headNode;
}
struct Node* createNode(int date)
{
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->date = date;
	newNode->next = NULL;
	return newNode;
}
void printList(struct Node* headNode)
{
	struct Node* pmove = headNode->next;
	while (pmove)
	{
		printf("%d ", pmove->date);
		pmove = pmove->next;
	}
	printf("\n");
}
void insert(struct Node* headNode, int date)//表头插入法
{
	struct Node* newNode = createNode(date);
	newNode->next = headNode->next;
	headNode->next = newNode;
}
void dele(struct Node* headNode, int posdate)//posdate是要删的数
{
	struct Node* posNode = headNode->next;
	struct Node* posNodefront = headNode;//posNodefront是要删的数前一个数
	if (posNode == NULL) printf("无法删除链表为空\n");
	else
	{
		while (posNode->date!=posdate)//[headNode]——[headNode->next]——[]
			                          //[posNodefront]——[3]——[2]——[1]
		{                             //[posNodefront]——[posNode]——[2]——[1]
			                          //[3]——[2]——[1]——[]//这里有点迷惑了?
			                          //
			posNodefront = posNode;
			posNode = posNodefront->next;
			if (posNode == NULL)
			{
				printf("无法找到相关信息,无法删除\n");
				return;
			}
		}
		posNodefront->next = posNode->next;//[3]——[1]——[]——[]
		free(posNode);
	}
}
int main()
{
	struct Node* list = createList();//声明链表名称
	insert(list, 1);//插入1
	insert(list, 2);
	insert(list, 3);
	printList(list);//打印
	dele(list, 2);//删除2
	printList(list);//打印
	return 0;
}
