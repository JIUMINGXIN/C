-------------------------------------------------------------------------------------------------------------------------------------
2.h 
#define _CRT_SECURE_NO_WARNINGS 
#include <stdio.h>
#define ROW 3
#define COL 3
#include <time.h>
#include <stdlib.h>
void w(char q[ROW][COL], int row, int col);
void e(char q[ROW][COL], int row, int col);
void r(char q[ROW][COL], int row, int col);
void t(char q[ROW][COL], int row, int col);
char c(char q[ROW][COL], int row, int col);
-------------------------------------------------------------------------------------------------------------------------------------
2.c
#include "2.h"
void game()
{
	char m = 0;
	char q[ROW][COL] = {0};
	w(q, ROW, COL);
	e(q, ROW, COL);
	while (1)
	{ 
	r(q, ROW, COL);
	e(q, ROW, COL);
	m = c(q, ROW, COL);
	if (m != 'c')
	{
		break;
	}
	t(q, ROW, COL);
	e(q, ROW, COL);
	m = c(q, ROW, COL);
	if (m != 'c')
	{
		break;
	}
	}
	if (m == '*')
	{
		printf("玩家赢\n");
	}
	else if (m == '#')
	{
		printf("电脑赢\n");
	}
	else  
		printf("平局\n");
}
void menu()
{
	printf("*******************\n");
	printf("***1.play 0.exit***\n");
	printf("*******************\n");
}
void test()
{
	int a = 0;
	srand(unsigned int(time(NULL)));
	do
	{
		menu();
		scanf("%d", &a);
		switch (a)
		{
		case 1:
			printf("三子棋游戏\n");
			game();
			break;
		case 0:
			printf("游戏结束\n");
			break;
		default:
			printf("输入错误,请重新选择\n");
			break;
		}

	} while (a!=0);
}
int main()
{
	test();

	return 0;
}
-------------------------------------------------------------------------------------------------------------------------------------
game.c
#include "2.h"

void w(char q[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for(j = 0; j < col; j++)
		{
			q[i][j] = ' ';

		}

	}
}
void e(char q[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row;i++)
	{
		for (j=0;j<col;j++)
		{ 
		printf(" %c ",q[i][j]);
		if (j<col-1)
		printf("|");
		}
		printf("\n");
		if (i<row-1)
			{
		for (j = 0; j < col; j++)
		{
			printf("---");
			if (j<col-1)
			printf("|");
		}
		printf("\n");
			}
	}
}
void r(char q[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走>\n");
	while (1)
	{
	printf("请输入要下的下标>:");
	scanf("%d%d", &x, &y);
	if (x >= 1 && x <= row && y >= 1 && y <= col)
	{
		if (q[x - 1][y - 1] == ' ')
		{
			q[x - 1][y - 1] = '*';
			break;
		}
	else
		{
			printf("该坐标被占用\n");
		}

	}
	else

	{
		printf("输入不合法请重新输入\n");
	}
 }
}
void t(char q[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("电脑走>\n");
	while (1)
	{
	x = rand()% row;
	y = rand()% col;
	if (q[x ][y] == ' ')
	{
		q[x][y] = '#';
		break;
	}
	 }
}
int g(char q[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (q[i][j] == ' ')
			{
				return 0;//满了
			}
			
		}
	}
	return 1;//没满
}
char c(char q[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)//3行
	{
		if (q[i][0] == q[i][1] && q[i][1] == q[i][2] && q[i][1] != ' ')
		{
			return q[i][1];
		}
	}
	for (j = 0; j < col; j++)//3列
	{
		if (q[0][j] == q[1][j] && q[1][j] == q[2][j] && q[1][j] != ' ')
		{
			return q[1][j];
		}
	}
	//对角线
	if (q[0][0] == q[1][1] && q[1][1] == q[2][2] && q[1][1] != ' ')
		return q[1][1];
	if (q[0][2] == q[1][1] && q[1][1] == q[2][0] && q[1][1] != ' ')
		return q[1][1];

	if (g(q,row,col) == 1)
	{
		return 'q';//结束
	}
	return 'c';//继续
}
