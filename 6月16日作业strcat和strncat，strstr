//int left(char* str1, char* str2)
//{
//	int len = strlen(str1);
//	int len2 = strlen(str2);
//	if (len != len2)//先下手为强
//		return 0;
//	//1.在str1字符串中追加一个str1字符串
//	//strcat(str1,str1);//错误 自己追加自己把原本的\0覆盖成a(把str1字符串的第一个字符)然后就找不到\0
//	strncat(str1, str1, len);//abcdefabcdef
//	//2.判断str2指向的字符串是否是str1指向的字符串的子串
//	//strstr-找子串
//	char* ret = strstr(str1, str2);//在str1中找str2的子串 如果有返回str1中和str2相等字符的地址(d) 没有返回null
//	if (ret == NULL)
//	{
//		return 0;
//	}
//	else
//		return 1;
//}
//int main()
//{
//	char arr1[30] = "abcdef";
//	char arr2[] = "defab";
//	int ret = left(arr1, arr2);
//	if (ret == 1)
//	{
//		printf("yes");
//	}
//	else
//		printf("no");
//	return 0;
//}


int s(int arr[3][3], int k, int* x, int* y)
{
	int hang = 0;
	int lei = *y - 1;
	while (hang<=2 && lei>=0)
	{
		if (arr[hang][lei] > k)
		{
			lei--;
		}
		else if (arr[hang][lei] < k)
		{
			hang++;
		}
		else
		{
			*x = hang;
			*y = lei;
			return 1;
		}
			
	}
	return 0;
}
int main()//杨氏矩阵每一行越后面数越大每一列也是
{
	int arr[3][3] = {{1,2,3},{4,5,6},{7,8,9}};
	int k = 7;
	int x = 3;
	int y = 3;
	int ret = s(arr, k, &x, &y);
	if (ret == 1)
	{
		printf("找到了\n");
		printf("下标是%d %d", x, y);
	}
	else
		printf("找不到");
	return 0;
}
