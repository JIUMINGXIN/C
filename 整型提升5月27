//int main()//不同类型可以访问多少字节 char可以访问1个字节，int可以访问4个字节
//{
//	int a = 0x11223344;
//	char* p = (char*)&a;
//	*p = 0;
//	return 0;
//}

//int main()
//{
//	char a = -1;
//	//10000000 00000000 00000000 00000001
//	//11111111 11111111 11111111 11111110
//	//11111111 11111111 11111111 11111111 
//	//11111111 //因为char只能访问1个字节
//	//11111111 11111111 11111111 11111111 //因为打印%d所以要整型提升在符号位前补1(有符号数前面补1)
//	//11111111 11111111 11111111 11111110
//	//10000000 00000000 00000000 00000001：-1
//	signed char b = -1;
//	//10000000 00000000 00000000 00000001：-1
//	unsigned char c = -1;
//	//11111111 11111111 11111111 11111111 ：补码
//	//11111111//因为char只能访问1个字节
//	//00000000 00000000 00000000 11111111 //因为打印%d所以要整型提升在高位前补0(无符号数前面补0，无符号数原码反码补码相同)
//	printf("a=%d b=%d c=%d", a,b,c);//-1 -1 255
//	return 0;
//}

int main()
{
	char a = -128;
	//10000000 00000000 00000000 10000000
	//11111111 11111111 11111111 01111111
	//11111111 11111111 11111111 10000000
	//10000000//因为打印的是无符号数所以要整型提升
	//11111111 11111111 11111111 10000000//无符号数原码反码补码相同
	printf("a=%u", a);
	return 0;
}
int main()
{
	char a = 128;
	//00000000 00000000 00000000 10000000
	//10000000//因为打印的是无符号数所以要整型提升
	//11111111 11111111 11111111 10000000//无符号数原码反码补码相同
	printf("a=%u", a);
	return 0;
}
整型提升要看那个数存储的位置是否是有符号数或者无符号数，如果是有符号数在符号位前补1，之后还要把补完1的补码变成原码，如果是无符号数在最高位补0（输出的是原码，存储在内存中的是补码）
