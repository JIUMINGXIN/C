2.h
#define Max 1000
#define max_name 20
#define max_sex 5
#define max_tele 12
#define max_addr 30
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
enum option//可读性更好
{
	EXIT,
	ADD,
	DEL,
	SEARCH,
	MODIFY,
	SHOW,
	SORT
};
struct peoinfo
{
	char name[max_name];
	int age;
	char sex[max_sex];
	char tele[max_tele];
	char addr[max_addr];
};

struct contact
{
	struct peoinfo date[Max];//1000个人的信息
	int size;//记录当前有多少人的信息
};

void initcontact(struct contact* ps);//初始化
void addcontact(struct contact* ps);//添加
void showcontact(const struct contact* ps);//显示
void delcontact(struct contact* ps);//删除
void serchcontact(const struct contact* ps);//查询
void sortcontact(struct contact* ps);//排序
---------------------------------------------------------------------------------------------------------------------------------
2.cpp
#include "2.h"

void menu()
{
	printf("**********************************************\n");
	printf("**********1.Add         2.Del    *************\n");
	printf("**********3.Search      4.Modify *************\n");
	printf("**********5.Show        6.Sort   *************\n");
	printf("**********0.Exit                 *************\n");
	printf("**********************************************\n");
}

int main()
{
	
	int input = 0;
	struct contact con;
	//初始化
	initcontact(&con);
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		switch (input)
		{
		case ADD:
			addcontact(&con);
			break;
		case DEL:
			delcontact(&con);
			break;
		case SEARCH:
			serchcontact(&con);
			break;
		case MODIFY:
			break;
		case SHOW:
			showcontact(&con);
			break;
		case SORT:
			sortcontact(&con);
			break;
		case EXIT:
			printf("结束\n");
			break;
		default:
			printf("输入错误\n");
			break;
		}
	} while (input);
	return 0;
}
-------------------------------------------------------------------------------------------------------------------------
1.cpp
#include "2.h"

void initcontact(struct contact* ps)
{
	memset(ps->date, 0, sizeof(ps->date));
	ps->size = 0;
}
void addcontact( struct contact* ps)
{
	if (ps->size== Max)
	{
		printf("已满");
	}
	else
	{
		printf("请输入名字:>");
		scanf("%s", ps->date[ps->size].name);
		printf("请输入年龄:>");
		scanf("%d", &(ps->date[ps->size].age));
		printf("请输入性别:>");
		scanf("%s", ps->date[ps->size].sex);
		printf("请输入电话:>");
		scanf("%s", ps->date[ps->size].tele);
		printf("请输入地址:>");
		scanf("%s", ps->date[ps->size].addr);
		ps->size++;
		printf("添加成功\n");
	}
}

void showcontact(const struct contact* ps)
{
	int i = 0;
	if (ps->size == 0)
	{
		printf("通讯录为空\n");
	}
	else
	{
		printf("%-20s\t%-s\t%-5s\t%-12s\t%-30s\n", "名字", "年龄", "性别", "电话", "地址");
		for (i = 0; i < ps->size; i++)
		{
			printf("%-20s\t%-d\t%-5s\t%-12s\t%-30s\n", ps->date[i].name, ps->date[i].age, ps->date[i].sex, ps->date[i].tele, ps->date[i].addr);
		}
	}
	
}
static int find(const struct contact* ps, char name[max_name])//加了static只能在本源文件使用
{
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		if (strcmp(ps->date[i].name, name) == 0)
		{
			return i;
		}
	}
	return -1;
}
void delcontact(struct contact* ps)
{
	char name[max_name];
	printf("请输入要删除的名字:>");
	scanf("%s", name);
	//1.查找要删除的人在什么位置
	int ret=find(ps, name);
	//2.删除
	if (ret==-1)
	{
		printf("没有此人\n");
	}
	else
	{
		int j = 0;
		for (j = ret; j <ps->size-1 ; j++)
		{
			ps->date[j]=ps->date[j + 1];
		}
		ps->size--;
		printf("删除成功\n");
	}
}

void serchcontact(const struct contact* ps)//查询
{
	char name[max_name];
	printf("请输入要查询的名字:>");
	scanf("%s", name);
	int ret=find(ps, name);
	if (ret == -1)
	{
		printf("查询不到此人\n");
	}
	else
	{
		printf("%-20s\t%-s\t%-5s\t%-12s\t%-30s\n", "名字", "年龄", "性别", "电话", "地址");
		printf("%-20s\t%-d\t%-5s\t%-12s\t%-30s\n",
				ps->date[ret].name,
				ps->date[ret].age,
				ps->date[ret].sex,
				ps->date[ret].tele,
				ps->date[ret].addr);
	}
}

int name_sort(const void* e1, const void* e2)
{
	return strcmp((((struct contact*)e1)->date->name),(((struct contact*)e2)->date->name));
}
int age_sort(const void* e1, const void* e2)
{
	return ((struct contact*)e1)->date->age - ((struct contact*)e2)->date->age;
}
void sortcontact(struct contact* ps)//排序
{
	int s = 0;
	printf("请输入排序什么:>");
	scanf("%d", &s);
	if (s == 1)
	{
		qsort(ps->date,ps->size , sizeof(struct peoinfo), name_sort);
		printf("排序成功\n");
	}
	else if (s == 2)
	{
		qsort(ps->date, ps->size, sizeof(struct peoinfo), age_sort);
		printf("排序成功\n");
	}
}
